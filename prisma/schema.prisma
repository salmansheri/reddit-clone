// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int     @unique
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum VoteType {
  UP
  DOWN
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int      @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                Int            @id @default(autoincrement())
  name              String?
  email             String?        @unique
  emailVerified     DateTime?
  createdSubreddits Subreddit[]    @relation("CreatedBy")
  subscriptions     Subscription[]
  votes             Vote[]

  username String? @unique

  image       String?
  accounts    Account[]
  sessions    Session[]
  Post        Post[]
  Comment     Comment[]
  CommentVote CommentVote[]
}

model Subreddit {
  id        Int      @id @default(autoincrement())
  name      String  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]

  creatorId   Int?          
  Creator     User?          @relation("CreatedBy", fields: [creatorId], references: [id])
  subscribers Subscription[]

  @@index([name])
}

model Subscription {
  user        User      @relation(fields: [userId], references: [id])
  userId      Int     
  subreddit   Subreddit @relation(fields: [subredditId], references: [id])
  subredditId Int      

  @@id([userId, subredditId])
}

model Post {
  id          Int       @id @default(autoincrement())
  title       String
  content     Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  author      User      @relation(fields: [authorId], references: [id])
  authorId    Int       
  subreddit   Subreddit @relation(fields: [subredditId], references: [id])
  subredditId Int      
  comments    Comment[]
  votes       Vote[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  text      String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int     
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int   
  replyToId Int?
  replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("ReplyTo")

  votes     CommentVote[]
  commentId String?
  updatedAt DateTime      @updatedAt
}

model Vote {
  user   User     @relation(fields: [userId], references: [id])
  userId Int     
  post   Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int     
  type   VoteType

  @@id([userId, postId])
}

model CommentVote {
  user      User     @relation(fields: [userId], references: [id])
  userId    Int     
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int      
  type      VoteType

  @@id([userId, commentId])
}
